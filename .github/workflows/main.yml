name: CI
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # latest = https://www.microchip.com/mplabxc16linux
      XC16_INSTALLER_URL: "https://ww1.microchip.com/downloads/en/DeviceDoc/xc16-v1.60-full-install-linux64-installer.run"
    steps:
      - name: Clean workspace
        uses: AutoModality/action-clean@v1

      - name: set environment variables
        run: |
          echo "DOWNLOADS_PATH=$PWD/downloads" >> $GITHUB_ENV
          echo "XC16_INSTALLER_PATH=$PWD/downloads/xc16-linux-installer.run" >> $GITHUB_ENV
          echo "XC16_INSTALL_PREFIX_PATH=/opt/microchip/xc16/v1.60" >> $GITHUB_ENV

      - id: cache-xc16
        uses: actions/cache@v2
        with:
          path: ${{ env.XC16_INSTALLER_PATH }}
          key: ${{ env.XC16_INSTALLER_URL }}

      - name: Download XC16
        if: steps.cache-xc16.outputs.cache-hit != 'true'
        run: |
          mkdir -p $DOWNLOADS_PATH
          curl -L --verbose --output "$XC16_INSTALLER_PATH" "$XC16_INSTALLER_URL"
          md5sum "$XC16_INSTALLER_PATH"

      - name: Install Microchip XC16 compiler
        run: |
          echo "$XC16_INSTALL_PREFIX_PATH/bin" >> $GITHUB_PATH
          if ! command -v xc16-gcc &> /dev/null
          then
            chmod +x "$XC16_INSTALLER_PATH"

            # stupid installer requires stupid admin rights and only properly installs to global opt
            sudo "$XC16_INSTALLER_PATH" --mode unattended --ModifyAll 0 --netservername ""
          fi

      - name: Install Dependencies
        run: sudo apt install doxygen graphviz

      - name: Get firmware source code
        uses: actions/checkout@v2
        with:
          path: src
          submodules: true

      - name: Build firmware
        run: |
          mkdir build
          cmake -S src -B build -DCMAKE_TOOLCHAIN_FILE="$(pwd)/src/cmake/PowerBoard_toolchain.cmake"
          cmake --build build
          cmake --install build --prefix install

      - name: Upload build folder (for debuggirg)
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

      - name: Upload install folder
        uses: actions/upload-artifact@v2
        with:
          name: install
          path: install

  test-bootload:
    runs-on: roverpro
    needs: build
    steps:
      - name: Download install folder
        uses: actions/download-artifact@v2
        with:
          name: install
          path: install
      - name: Install openrover for Python
        run: |
          which python3
          python3 -m venv ./venv
          source ./venv/bin/activate

          pip install --upgrade pip setuptools wheel
          pip install openrover
      - name: Run pitstop
        timeout-minutes: 5
        run: |
          source ./venv/bin/activate
          # note this requires permission: sudo usermod -a -G dialout $(whoami)
          pitstop -f install/PowerBoard.hex -m 0
          sleep 30
          pitstop -m 0
